@using BlazorDapperCodeGenerator.Data
@using Pluralize.NET.Core
@using System.Collections.Generic
@using System.Linq
@using System.Text.RegularExpressions
@inject HttpClient Http
@using Microsoft.AspNetCore.Hosting;
@using System.IO;
@inject IWebHostEnvironment webHostEnvironment;
@inject SfDialogService DialogService
@rendermode InteractiveServer

@page "/"

<PageTitle>Code Generator</PageTitle>

<h1>Blazor Dapper Code Generator</h1>
<p>Creates barebones code for Blazor Dapper CRUD for one database table.</p>
<ul>
    <li>Note that the <strong>Namespace</strong> name is the name of your project folder (also the name of the solution).</li>
    <li>For best results <strong>make the first field the primary key</strong>.</li>
</ul>
<hr />

<EditForm Model="@dappercodetemplate" OnValidSubmit="@Save" FormName="main">
    <div class="grid-container">
        <div class="grid-child left-column">
            <br />

            <p>To get the SQL Server CREATE TABLE statement in SQL Server Management Studio or SQL Server Object Explorer or a similar tool, right-click the table name, choose Script As > CREATE To > New Query Window and select the SQL code from CREATE TABLE to the end of the last column definition. If you get it wrong, this won't work.</p>
            <br />
            <img src="../Images/Instruction.png" />
        </div>
        <div class="grid-child right-column">
            <SfTextBox Enabled="true" Placeholder="Namespace"
                       FloatLabelType="@FloatLabelType.Always"
                       @bind-Value="dappercodetemplate.NamespaceName">
            </SfTextBox>

            <div class="multiline">
                <SfTextBox Multiline=true Enabled="true" Placeholder="SQL Create Table statement"
                           FloatLabelType="@FloatLabelType.Always"
                           HtmlAttributes="@htmlAttribute"
                           @bind-Value="dappercodetemplate.TableDesign">
                </SfTextBox>
            </div>
        </div>
    </div>
    <hr />
    <div class="e-footer-content">
        <div class="button-container">
            <button type="submit" class="e-btn e-normal e-primary">- - - - - - - Run! - - - - -  - -</button> The results will be displayed below:
        </div>
    </div>
</EditForm>

<Syncfusion.Blazor.Popups.SfDialogProvider />

<code>
    <pre>
        @dappercodetemplate.GeneratedCode
    </pre>
</code>

<style>
    .grid-container {
        display: grid;
        max-width: 90%; /* Maximum width of the whole container - in this case both columns */
        grid-template-columns: 1fr 2fr; /* Relative width of each column (1fr 1fr is equivalent to, say, 33fr 33fr */
        grid-gap: 75px; /* size of the gap between columns */
    }

    .multiline {
        margin-top: 0px;
        margin-bottom: 0px;
        width: 100%;
        height: 250px;
    }
</style>

@code {

    DapperCodeTemplate dappercodetemplate = new();
    string? tablename;
    string? primaryKey;
    string? sqlfieldsinsert1;
    string? sqlfieldsinsert2;
    string? modelfield;
    string? parametersadd;
    string? sqldelete;
    string? sqlselectlist;
    string? sqlselectone;
    string? sqlinsert;
    string? sqlupdate;

    //int iDateCounter = 0;
    public string rawtemplate = string.Empty;

    private Dictionary<string, object> htmlAttribute = new Dictionary<string, object>()
    {
        {"rows", "22" }
    };

    //Executes on page open, gets the template used for the output
    protected override void OnInitialized()
    {
        rawtemplate = System.IO.File.ReadAllText(System.IO.Path.Combine(webHostEnvironment.WebRootPath, @"MyStaticFiles/DapperCodeGeneratorTemplate.txt"));
    }

    // Executes OnValidSubmit of EditForm above
    public async Task Save()
    {
        string? nsname = dappercodetemplate.NamespaceName;
        string? tableinfo = dappercodetemplate.TableDesign;

        //Check that Namespace has some text.
        if (string.IsNullOrEmpty(nsname))
        {
            await DialogService.AlertAsync("Namespace must not be left blank!", "No Namespace");
            return;
        }

        //Check that Table definition has some text.
        if (string.IsNullOrEmpty(tableinfo))
        {
            await DialogService.AlertAsync("Table definition must not be left blank!", "No SQL");
            return;
        }

        // Find the table name
        tableinfo = tableinfo.Replace("CREATE TABLE [dbo].[", "");
        // If there's anything after the last field definition, remove all that.
        int endsat = tableinfo.IndexOf("CONSTRAINT");
        if (endsat > 0)
        {
            tableinfo = tableinfo.Substring(0, endsat);
        }
        tableinfo = tableinfo.Trim();
        tablename = tableinfo.Substring(0, tableinfo.IndexOf("]")).Replace("\n", "");
        char[] a = tablename.ToCharArray();
        a[0] = char.ToUpper(a[0]);
        string classname = new string(a);
        if (classname.Substring(0, 3) == "Tbl")
        {
            classname = classname.Substring(3);
        }
        string classservice = classname + "Service";
        string objectname = classname.ToLower();
        string listpagename = objectname + "list";
        string listname = new Pluralizer().Pluralize(objectname);
        //Just in case Pluraizle doesn't change the name.
        if (listname == objectname)
        {
            listname += "s";
        }
        string? fieldlist = @dappercodetemplate.TableDesign;
        int firstparen = tableinfo.IndexOf("(");
        tableinfo = tableinfo.Substring(firstparen + 1);
        tableinfo = tableinfo.Replace("\n", "").Replace("\t", "");

        var tablefields = NormalizeFieldNames(tableinfo, objectname);

        rawtemplate = rawtemplate.Replace("@@NAMESPACE", nsname);
        rawtemplate = rawtemplate.Replace("@@CLASSNAME", classname);
        rawtemplate = rawtemplate.Replace("@@CLASSService", classservice);
        rawtemplate = rawtemplate.Replace("@@objectname", objectname);
        rawtemplate = rawtemplate.Replace("@@objectlist", listname);

        @dappercodetemplate.GeneratedCode = rawtemplate;

    }

    public List<Tablefield> NormalizeFieldNames(string rawtext, string objectname)
    {
        Tablefield? tblfield = new();
        List<Tablefield> fieldlist = new();
        string[] fldnames = rawtext.Split("NULL,");
        string parametersAddUpdateOnly = string.Empty;

        int iCounter = 1;
        foreach (var fld in fldnames)
        {
            string working = fld.Trim();
            if (working.Length > 0)
            {
                string sfldname = working.Substring(1, working.IndexOf("]") - 1);
                sfldname = char.ToUpper(sfldname[0]) + sfldname.Substring(1);

                bool isRequired = (working.Substring(working.Length - 4) == " NOT");
                // Isolate the data type
                string datatype = working.Substring(working.IndexOf("]") + 2);
                datatype = datatype.Replace("IDENTITY(1,1) ", "");
                datatype = datatype.Replace("IDENTITY (1, 1) ", "");
                datatype = datatype.Replace("NULL", "").Replace("NOT", "");
                datatype = datatype.Replace("[", "").Replace("]", "").Trim();

                //Remove the parens and number (if any) from the datatype.
                string temptype = RemoveNonAlpha(datatype).Trim().ToLower();
                string? nettype = TypeMapper.GetNetType(temptype);
                string? dbtype = TypeMapper.GetDBType(temptype);

                // If it's any kind of "char" field, grab the length
                int maxlength = 0;
                if (datatype.Contains("char"))
                {
                    // Look for the length if it's any kind of char field.
                    string charlength = RemoveAlpha(datatype);
                    int number;
                    bool success = Int32.TryParse(charlength, out number);
                    if (success)
                    {
                        maxlength = number;
                    }
                }
                tblfield = new Tablefield(sfldname, datatype, nettype, dbtype, maxlength, isRequired);
                fieldlist.Add(tblfield);
                iCounter += 1;
            }
        }

        // Looping through here, throws error in generate() method.
        iCounter = 1;

        string sproc_oneparam = "";
        string sproc_allparams = "";
        string sproc_insertparams = "";
        string cappedType = "";
        string mydbtype = "";         //CJB


        foreach (Tablefield fld in fieldlist)
        {
            if (fld.IsRequired && fld.Fieldname != primaryKey)
            {
                modelfield += "[Required]\n";
            }
            if (fld.Length > 0)
            {
                modelfield += "[StringLength(" + fld.Length + ")]\n";
            }
            if (fld.IsRequired == true && fld.Codetype == "string")
            {
                modelfield += "public " + fld.Codetype + " " + fld.Fieldname + " { get; set; } = String.Empty;\n";
            }
            else
            {
                modelfield += "public " + fld.Codetype + " " + fld.Fieldname + " { get; set; }\n";
            }
            sproc_allparams += "@" + fld.Fieldname + " " + fld.SQLtype + ",\n";

            // The first field is assumed to be the key, so we don't include that on paramters for Insert sproc
            if (iCounter != 1)
            {
                sproc_insertparams += "@" + fld.Fieldname + " " + fld.SQLtype + ",\n";
            }
            if (iCounter == 1)
            {

                mydbtype = fld.DBtype;
                sproc_oneparam = "@" + fld.Fieldname + " " + fld.SQLtype;
                primaryKey = fld.Fieldname;
                // The Update stored proc requires the primary key as a parameter, insert doesn't.
                parametersAddUpdateOnly = "parameters.Add(" + Convert.ToChar(34) + fld.Fieldname + Convert.ToChar(34) + ", " + objectname + "." + fld.Fieldname + ", DbType." + fld.DBtype + ");\n";
                sqldelete = "DELETE FROM " + tablename + " WHERE " + primaryKey + " = @" + primaryKey;
                sqlselectlist = "SELECT * ";
                sqlselectone = "SELECT " + primaryKey;
                sqlinsert = "INSERT INTO " + tablename + "(";
                sqlupdate = "UPDATE " + tablename + " SET ";
            }

            // ===================================================================================================== Input tags for adding and editing, never the primary key.
            if (iCounter > 1)
            {
                parametersadd += "parameters.Add(" + Convert.ToChar(34) + fld.Fieldname + Convert.ToChar(34) + ", " + objectname + "." + fld.Fieldname + ", DbType." + fld.DBtype + ");\n";
                cappedType = TypeMapper.GetHtmlType(fld.Codetype);
                cappedType = char.ToUpper(cappedType[0]) + cappedType.Substring(1);
                //If the data type in SQL is Text, then use TextArea rather than Input'
                if (fld.SQLtype == "text")
                {
                    cappedType = "TextArea";
                }

                sqlselectone += ", " + fld.Fieldname;
                sqlfieldsinsert1 += fld.Fieldname + ", ";
                sqlfieldsinsert2 += "@" + fld.Fieldname + ", ";
                sqlupdate += fld.Fieldname + " = @" + fld.Fieldname + ", ";

            }
            iCounter += 1;
        }
        sproc_allparams = sproc_allparams.Substring(0, sproc_allparams.Length - 2);
        sproc_insertparams = sproc_insertparams.Substring(0, sproc_insertparams.Length - 2);
        rawtemplate = rawtemplate.Replace("@@PK", primaryKey);
        rawtemplate = rawtemplate.Replace("@@spOneParam", sproc_oneparam);
        rawtemplate = rawtemplate.Replace("@@spAllParams", sproc_allparams);
        rawtemplate = rawtemplate.Replace("@@spInsertParams", sproc_insertparams);
        rawtemplate = rawtemplate.Replace("@@OBJECTNAME", objectname);
        rawtemplate = rawtemplate.Replace("@@MODELCODE", modelfield);
        rawtemplate = rawtemplate.Replace("@@PARAMETERADDUPDATEONLY", parametersAddUpdateOnly);
        rawtemplate = rawtemplate.Replace("@@PARAMETERSADD", parametersadd);
        rawtemplate = rawtemplate.Replace("@@PRIMARYKEY", primaryKey);

        //Modification by CJB
        rawtemplate = rawtemplate.Replace("@@DBTYPE", mydbtype);

        //Remove extra comma and space at the end of field names.
        sqlfieldsinsert1 = sqlfieldsinsert1.Substring(0, sqlfieldsinsert1.Length - 2);
        sqlfieldsinsert2 = sqlfieldsinsert2.Substring(0, sqlfieldsinsert2.Length - 2);
        sqlupdate = sqlupdate.Substring(0, sqlupdate.Length - 2);
        sqlinsert += sqlfieldsinsert1 + ") VALUES (" + sqlfieldsinsert2 + ")";
        sqlupdate += " WHERE " + primaryKey + " = @" + primaryKey;
        sqlselectlist += " FROM " + tablename + " ORDER BY " + primaryKey + " DESC";
        sqlselectone += " FROM " + tablename + " WHERE " + primaryKey + "= @" + primaryKey;

        rawtemplate = rawtemplate.Replace("@@SQLINSERT", sqlinsert);
        rawtemplate = rawtemplate.Replace("@@SQLUPDATE", sqlupdate);
        rawtemplate = rawtemplate.Replace("@@SQLSELECTLIST", sqlselectlist);
        rawtemplate = rawtemplate.Replace("@@SQLSELECTONE", sqlselectone);
        rawtemplate = rawtemplate.Replace("@@SQLDELETE", sqldelete);
        rawtemplate = rawtemplate.Replace("@@TABLENAME", tablename);
        return fieldlist;
    }

    // Remove all numbers.
    public string RemoveNonAlpha(string input)
    {
        return Regex.Replace(input, @"[^a-zA-Z\._]", string.Empty);
    }

    // Remove all except numbers.
    public string RemoveAlpha(string input)
    {
        return Regex.Replace(input, @"[^0-9.]", string.Empty);
    }

}